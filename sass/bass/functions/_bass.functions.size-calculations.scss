// For use in media queries
// Media queries don't pay attention to the html element's body size and always go with the browser default (16px)
@function root-em($values) {
  @return em($values, 16);
}

// Source: Foundation 4
// -------------------------------------------------------------------------------------------------

// This is the old em-calc function from Foundation 4
// The new em-calc function in Foundation 5 inexpicably delegates to rem-calc
@function em($values, $base-value: $rem-base) {
    $max: length($values); // Get the total number of parameters passed

    // If there is only 1 parameter, then return it as an integer.
    // This is done because a list can't be multiplied or divided even if it contains a single value
    @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

    $emValues: (); // This will eventually store the converted $values in a list
    @for $i from 1 through $max {
        $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
    }
    @return $emValues;
}


// Source: Foundation 5
// -------------------------------------------------------------------------------------------------

@function rem($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// Converts "px" to "em" using the ($)em-base
@function convert-to-em($value, $base-value: $rem-base) {
    $value: strip-unit($value) / strip-unit($base-value) * 1em;
    @if ($value == 0em) { $value: 0; } // Turn 0em into 0
    @return $value;
}