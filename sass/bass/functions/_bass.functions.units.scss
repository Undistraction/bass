////
/// @author Pedr Browne (Originally from Foundation 4 and 5)
/// @group support
////

// Functions that allow you to think in pixels, but render rems (or ems)
// Pixel fallbacks should be provided with a Postprocessor if required.

/// For use in media queries
/// Media queries don't pay attention to the html element's body size and always go
/// with the browser default (16px).
///
/// @param {List} $values
///   The values to convert to root-ems.
///
/// @returns {List}
///   The converted values
///
/// @access public
///
@function root-em($values) {
  @return em($values, $bass-rem-base);
}

/// This is the old em-calc function from Foundation 4
/// The new em-calc function in Foundation 5 inexpicably delegates to rem-calc
/// Source: Foundation 4
///
/// @access public
///
@function em($values, $base-value: $bass-rem-base) {
    $max: length($values); // Get the total number of parameters passed

    @if $max == 1 {
      @return px-em(nth($values, 1), $base-value);
    }

    $emValues: ();
    @for $i from 1 through $max {
        $emValues: append($emValues, px-em(nth($values, $i), $base-value));
    }
    @return $emValues;
}

/// Convert a pixel value to its rem equivalent
/// Source: Foundation 5
///
/// @access public
///
@function rem($values) {
  $max: length($values);

  @if $max == 1 {
    @return px-rem(nth($values, 1));
  }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, px-rem(nth($values, $i)));
  }
  @return $remValues;
}

/// Remove the unit from a number
///
/// @access private
///
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Convert value to rems
///
/// @access private
///
@function px-rem($value) {
  // Strip units of both in case $value is passed in without units
  $value: strip-unit($value) / strip-unit($bass-rem-base) * 1rem;
  @if $value == 0rem {
    $value: 0;
  }
  @return $value;
}

///
/// @access private
///
@function px-em($value, $base-value: $bass-rem-base) {
  // Strip units of both in case $value is passed in without units
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if $value == 0em {
    $value: 0;
  }
  @return $value;
}

/// Parse custom values into distance values.
///
/// @param {String} $value
///   The value to parse.
///
/// @param {String} $orientation
///   The orientation of the value (horizontal | vertical).
///
/// @returns {Number}
///   The parsed value
///
/// @throws $bass-invalid-value-error
///
@function bass-parse-custom-unit-filter($value, $orientation){
  // Handle unitless values
  @if type-of($value) == number {
    @if unitless($value) {
      @return bass-rhythm-value($orientation, $value);
    }
  // Handle values in the custom units map
  } @else if map-has-key($bass-custom-units-map, $value) {
    // Find the unit
    $unit: map-get($bass-custom-units-map, $value);
    // Use the unit with the rhythm value for the orientation
    @return bass-rhythm-value($orientation, $unit);
  }
  @return bass-throw-error($bass-invalid-value-error, "Invalid value #{$value}");
}

/// Determine if the value is a valid number with a unit
///
/// @param {String} $value
///  Value to be checked
///
/// @returns {Bool}
///  Was the value number with a unit?
///
///
@function bass-is-unitless-number($value) {
  @return (type-of($value) == number and unitless($value));
}