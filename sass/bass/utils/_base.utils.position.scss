//
// Offset positioning helpers
//
// Based on code from: http://hugogiraudel.com/2014/05/19/new-offsets-sass-mixin/
// -------------------------------------------------------------------------------------------------

@mixin position($position, $args: ()) {

  $offsets: (
    top: null,
    right: null,
    bottom: null,
    left: null
  );

  // Vertical Fill
  @if index($args, fill-v) or index($args, fill){
    $offsets: map-set($offsets, top, 0);
    $offsets: map-set($offsets, bottom, 0);
  }

  // Horizontal Fill
  @if index($args, fill-h) or index($args, fill){
    $offsets: map-set($offsets, left, 0);
    $offsets: map-set($offsets, right, 0);
  }

  // Run through each of the four offsets (top | right | bottom | left)
  @each $offset, $offset-value in $offsets {
    $index: index($args, $offset);

    @if $index {
      @if $index == length($args) {
        $offsets: map-set($offsets, $offset, 0);
      }
      @else {
        $next: nth($args, $index + 1);
        @if position-is-valid-length($next) {
          $offsets: map-set($offsets, $offset, $next);
        }
        @else if index($offsets, $next) {
          $offsets: map-set($offsets, $offset, 0);
        }
        @else {
          @warn "Invalid value `#{$next}` for offset `#{$offset}`.";
        }
      }
    }
  }

  // Render
  position: $position;

  @each $offset, $offset-value in $offsets {
    @if($offset-value){
      #{$offset}: #{$offset-value};
    }
  }
}

// Shorthand

@mixin position-absolute($args: ()) {
  @include position(absolute, $args);
}

@mixin position-fixed($args: ()) {
  @include position(fixed, $args);
}

@mixin position-relative($args: ()) {
  @include position(relative, $args);
}

// Function checking if $value is a valid length

@function position-is-valid-length($value) {
  @return (type-of($value) == "number" and not unitless($value))
       or (index(auto initial inherit 0, $value) != false);
}
