/*! bass v0.2.12 – 17.10.2014 */

//
// Reusable Default shadows
// -------------------------------------------------------------------------------------------------

// A uniform inset shadow for use on items like input fields
@mixin inset-shadow {
  box-shadow: inset 0 0 rem(4) rgba(0,0,0,0.2);
}

//
// CSS-Only Shapes
// -------------------------------------------------------------------------------------------------

// Triangle pointing toward [top | bottom | left | right]
@mixin triangle( $length, $direction, $colour ) {
  $adjacent: opposite-position($direction);
  border: $length solid transparent;
  border-#{$adjacent}: $length solid $colour;
  border-#{$direction}: 0;
  height:0;
  width:0;
}

@mixin circle($diameter, $color) {
  width: $diameter;
  height: $diameter;
  background-color: $color;
  border-radius: $diameter/2;
}

@function opposite-position($position){
  $positions:(
    top: bottom,
    bottom: top,
    left: right,
    right: left
  );
  @return map-get($positions, $position);
}


//
// Calculate lowest/highest values in the given range
//
// Source: Foundation 5
// -------------------------------------------------------------------------------------------------

@function lower-bound($range) {
  @if length($range) <= 0 {
    @return 0;
  }
  @return nth($range,1);
}

@function upper-bound($range) {
  @if length($range) < 2 {
    @return 999999999999;
  }
  @return nth($range, 2);
}

@function throw-error($location, $message){
  @error "ERROR @#{$location} – #{$message}";
}

//
// Functionality missing from Sass and Sassy Maps
//
// Note: I have a PR open adding this to Sassy maps
// -------------------------------------------------------------------------------------------------

// Perform a deep merge of two maps, optionally overwriting existing values
@function map-merge-deep($map-old, $map-new, $overwrite: true) {
  // Iterate through each value of the new map
  @each $key, $new-value in $map-new {
    // Check if that value already exists on the old map
    @if map-has-key($map-old, $key) {
      // There is an existing key
      $old-value: map-get($map-old, $key);
      @if type-of($new-value) == map and type-of($old-value) == map {
        // If both are maps, recurse regardless of $overwrite
        $merged-value: map-merge-deep($old-value, $new-value);
        $map-old: map-set($map-old, $key, $merged-value);
      }@else{
        // Otherwise check $overwrite
        @if $overwrite{
          $map-old: map-set($map-old, $key, $new-value);
        }
      }
    }@else{
      // There is no existing key so add
      $map-old: map-set($map-old, $key, $new-value);
    }
  }
  @return $map-old;
}

//
// Functions for managing vertical and horizontal rhythm
// -------------------------------------------------------------------------------------------------

// Wrap Vertical-rhythm's ambiguous 'rhythm' function in a 'v-rhythm' function.
@function v-rhythm( $lines: 1, $font-size: $base-font-size, $offset: 0) {
  @return rhythm($lines, $font-size, $offset )
};

// Provide a place to pull a constant value for horizontal rhythm
@function h-rhythm( $units: 1 ) {
  $units: parse-lines($units); // Parse for keywords using sass-vertical-rhythm's keywords
  @return $unit-of-horizontal-rhythm * $units;
};

//
// Functions that allow you to think in pixels, but render rems (or ems)
// Pixel fallbacks should be provided with a Postprocessor if required
// -------------------------------------------------------------------------------------------------

// For use in media queries
// Media queries don't pay attention to the html element's body size and always go with the browser default (16px)
@function root-em($values) {
  @return em($values, 16);
}

// This is the old em-calc function from Foundation 4
// The new em-calc function in Foundation 5 inexpicably delegates to rem-calc
// Source: Foundation 4
@function em($values, $base-value: $rem-base) {
    $max: length($values); // Get the total number of parameters passed

    // If there is only 1 parameter, then return it as an integer.
    // This is done because a list can't be multiplied or divided even if it contains a single value
    @if $max == 1 { @return convert-to-em(nth($values, 1), $base-value); }

    $emValues: (); // This will eventually store the converted $values in a list
    @for $i from 1 through $max {
        $emValues: append($emValues, convert-to-em(nth($values, $i), $base-value));
    }
    @return $emValues;
}

// Convert a pixel value to its rem equivalent
// Source: Foundation 5
@function rem($values, $base-value: $rem-base) {
  $max: length($values);

  @if $max == 1 { @return convert-to-rem(nth($values, 1), $base-value); }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, convert-to-rem(nth($values, $i), $base-value));
  }
  @return $remValues;
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function convert-to-rem($value, $base-value: $rem-base) {
  $value: strip-unit($value) / strip-unit($base-value) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

// Converts "px" to "em" using the $rem-base
@function convert-to-em($value, $base-value: $rem-base) {
    $value: strip-unit($value) / strip-unit($base-value) * 1em;
    @if ($value == 0em) { $value: 0; } // Turn 0em into 0
    @return $value;
}

//
// Default palette
//
// You can override any of these values by registering a palette of the same name.
// -------------------------------------------------------------------------------------------------

@include register-palette(default,
  (
    default:
    (
      background-color:       white,
      text-color:             black,
      text-color-quiet:       lighten(black, 15),
      text-color-loud:        white,
      title-color:            black,
      divider-color:          darken(white, 2)
    ),

    link:
    (
      text-color:             black,
      text-color-quiet:       lighten( black, 20),
      hover:
      (
        text-color:           lighten( black, 60),
      ),
      disabled:
      (
        text-color:           darken( black, 90),
      ),
      active:
      (
        text-color: lighten( black, 60)
      )
    ),

    button:
    (
      text-color:             white,
      background-color:       black,
      hover:
      (
        text-color:           darken(white, 20),
        background-color:     lighten( black, 40)
      ),
      disabled:
      (
        text-color:           darken( white, 30),
        background-color:     darken( white, 60)
      ),
      active:
      (
        text-color: darken( white, 20),
        background-color: lighten( black, 15)
      )
    ),

    form:(
      input:
      (
        background-color: darken(white, 5)
      )
    )
  )
);

//
// Default rhythm settings
// -------------------------------------------------------------------------------------------------

$rhythm-map: (
  default:(
    base-font-size: 16px,
    base-line-height: 22px
  )
);

// Vertical Rhythm
// -------------------------------------------------------------------------------------------------

// Vertical Rhythm configration
$base-font-size: get-rhythm(base-font-size);
$base-line-height: get-rhythm(base-line-height);
$round-to-nearest-half-line: true;
$rhythm-unit: 'rem';
$relative-font-sizing : false;
$min-line-padding: 0;
@include establish-baseline;

// Rem Conversion
// -------------------------------------------------------------------------------------------------

$rem-base: $base-font-size;

// Horizontal Rhythm
// -------------------------------------------------------------------------------------------------

$unit-of-horizontal-rhythm: rhythm(); // Here we are using the same unit as the vertical

//
// Default typescale
// -------------------------------------------------------------------------------------------------

$type-scale-map:
(
  default:
  (
    tiny:                10px,
    small:               12px,
    base:                16px,
    medium:              17px,
    large:               22px,
    x-large:             28px
  )
);

//
// Default typography
// -------------------------------------------------------------------------------------------------

$default-font-family: 'Helvetica Neue', 'Helvetica', 'Arial', sans-serif;
$default-font-weight: normal;

$header-font-family: $default-font-family ;
$header-font-weight: normal;
$header-font-style: normal;

$max-measure: 40em; // Maximum width of a paragraph proportional to the size of the font it uses

//
// Default UI
// -------------------------------------------------------------------------------------------------

$disabled-opacity: 0.7;
$border: solid 1px darken(white, 10);

$breakpoints: ();

@function get-breakpoint($name){
  @if map-has-key($breakpoints, $name) {
    @return map-get($breakpoints, $name);
  } @else {
    @error "@get-breakpoint There is no breakpoint named '#{$name}' in the $breakpoints map '#{inspect($breakpoints)}"
  }
}

//
// Modern Clearfix
//
// Source: [Bourbon](http://goo.gl/WXFG1F)
// -------------------------------------------------------------------------------------------------

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

%clearfix{
  @include clearfix;
}

@mixin size($width, $height) {
  width: $width;
  height: $height;
}

//
// Mixins and classes for improving font rendering and display
// -------------------------------------------------------------------------------------------------

// Switch font smoothing on (great for light-on-dark text)
// Source: http://maximilianhoffmann.com/posts/better-font-rendering-on-osx
@mixin font-smoothing-on {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@mixin font-smoothing-off {
  -webkit-font-smoothing: subpixel-antialiased;
  -moz-osx-font-smoothing: auto;
}

//
// Grid mixins for use with Susy Next
// -------------------------------------------------------------------------------------------------

@mixin span-centered($columns)
{
  width: span($columns);
  clear: both;
  float: none;
  margin: 0 auto !important;
}

//
// Classes and mixins to help with layout
// -------------------------------------------------------------------------------------------------

@mixin center-known {
  margin: 0 auto;
}

.center-known
{
   @include center-known();
}

@mixin center-contents {
  text-align: center;
}

.center-contents
{
   @include center-contents();
}

.left
{
  clear: left !important;
}

.right
{
  clear: right !important;
}

//
// Palette Map allows you to register and retrieve nested objects containing color palettes
// -------------------------------------------------------------------------------------------------

$palette-map: ();

// Look up a color value in the palette map
@function palette($palette-path...) {
  @return map-get-deep($palette-map, $palette-path);
}

// Shorthand
@function p($palette-path...) {
  @return palette($palette-path...);
}

// Register a palette to make it available using the c() function
// If no name is given, the values in $palette are added to $palette map's top level
@function register-palette($name:null, $palette:null, $overwrite:true) {
  // Merge, overriding existing values
  @if $name {
    $palette-map: map-merge-deep($palette-map, ($name: $palette), $overwrite) !global;
  }@else{
    $palette-map: map-merge-deep($palette-map, $palette, $overwrite) !global;
  }
  @return none;
}

// Because sass doesn't support function invocation at a root level it has to be done from within a mixin
@mixin register-palette($name:null, $palette:null, $overwrite:true){
  $temp: register-palette($name, $palette, $overwrite);
}

//
// Placeholder mixins
// -------------------------------------------------------------------------------------------------

// Stand in for content that has yet to be added
@mixin Placeholder($name, $min-width, $min-height: 0){
  background-color: #DDD;
  min-width: $min-width;
  min-height: $min-height;
  padding: v-rhythm() h-rhythm();
  &::after
  {
    content: $name;
  }
}

//
// A sinle location to store and lookup font-sizes using keywords.
//
// type-scale allows you to register and retrieve nested objects containing the size in pixels for
// the given named value at the current breakpoint ( small, base, medium, large, x-large etc )
// -------------------------------------------------------------------------------------------------

$type-scales: ();

@mixin register-type-scale($breakpoint, $type-scale){
  $type-scales: map-set($type-scales, $breakpoint, $type-scale) !global;
}

@function type-scale($breakpoint, $size) {
  @return map-get-deep($type-scales, $breakpoint, $size);
}

 //
 // Classes and mixins to help with hiding and showing elements
 // -------------------------------------------------------------------------------------------------

.is-text-hidden
{
 text-indent: 100%;
 white-space: nowrap;
 overflow: hidden;
}

.is-hidden
{
  display: none;
}

// Makes an element visually hidden, but accessible.
// Source: Foundation 5
// @see http://snook.ca/archives/html_and_css/hiding-content-for-accessibility
@mixin is-invisible {
  position: absolute !important;
  height: 1px;
  width: 1px;
  overflow: hidden;
  clip: rect(1px, 1px, 1px, 1px);
}

// Turns off the element-invisible effect.
@mixin is-invisible-off($position:static) {
  position: $position !important;
  height: auto;
  width: auto;
  overflow: visible;
  clip: auto;
}

.show-for-all
{
  @include element-invisible-off;
}

//
// Manage the z-index of elements in a central location
// -------------------------------------------------------------------------------------------------

$z-index-map: () !default;

// Constants
$z-index-bottom: 0;
$z-index-top: 9999999;

// Look up an element's z-index using a keyword
@function layer-z-index($layers...) {
  //
  @return map-get-deep($z-index-map, $layers...);
}

@mixin z-index($layers...) {
  z-index: layer-z-index($layers);
}

// Set box-sizing globally to handle padding and border widths
*,
*:before,
*:after {
  box-sizing: border-box;
}

html,
body {
  width: 100%;
  height: 100%;
}

html {
  overflow-y: scroll;
}

p {
  padding: 0;
  margin: 0;
}

%button {
  @include adjust-font-size-to(type-scale(base), 2);
  padding-left: h-rhythm(half);
  padding-right: h-rhythm(half);
  display: block;
  border: none;
  cursor: pointer;
  position: relative;
  text-decoration: none;
  text-align: center;
  -webkit-appearance: none;
  -webkit-border-radius:0;
  color: c(default, button, text-color);
  background-color: c(default, button, background-color);

  &.is-active {
    color: c(default, button, active, text-color);
    background-color: c(default, button, active, background-color);
  }

  &.is-disabled,
  &.is-disabled:hover {
    opacity: $disabled-opacity;
    cursor: not-allowed;
    color: c(default, button, disabled, text-color);
    background-color: c(default, button, disabled, background-color);
  }

  &:hover,
  &:focus {
    background-color: c(default, button, hover, background-color);
  }

  .Icon {
    @include adjust-font-size-to(type-scale(base), 2);
  }
}

button,
input[type="submit"] {
  @extend %button;
}

/* Adjust margin for form elements below */
input[type="file"],
input[type="checkbox"],
input[type="radio"] {
  margin: 0;
}

input,
textarea,
select
{
  @include margin-trailer(1);
}

/* Override normalize */
input[type="search"] {
  box-sizing: border-box;
}


/* We use this to get basic styling on all basic form elements */
input[type="text"],
input[type="password"],
input[type="date"],
input[type="datetime"],
input[type="datetime-local"],
input[type="month"],
input[type="week"],
input[type="email"],
input[type="number"],
input[type="search"],
input[type="tel"],
input[type="time"],
input[type="url"],
textarea {
  @include inset-shadow;
  border: none !important;
  -webkit-appearance: none;
  -webkit-border-radius: 0px;
  color: c(default, default, text-color);
  border-radius: 6px;
  background: c(default, form, input, background-color);
}

select
{
  @include adjust-font-size-to(type-scale(base), 2);
  border: $border;
  width: 100%;
  padding: 0 h-rhythm(0.5);
  border-radius: 0;
  -webkit-appearance: none;
  -webkit-border-radius: 0px;
}

input[type="submit"] {
  -webkit-appearance: none;
  -webkit-border-radius: 0px;
}

/* Respect enforced amount of rows for textarea */
textarea[rows] {
  height: auto;
}



input[type="checkbox"] + label,
input[type="radio"] + label {
  display: inline-block;
  margin-left: h-rhythm(0.5);
  margin-bottom: 0;
  vertical-align: baseline;
}

/* Normalize file input width */
input[type="file"] {
  width:100%;
}

form {
  @include margin-trailer;
}

input,
label {
  display: block;
  width: 100%;
}

input,
textarea {
  padding-left: h-rhythm(0.5);
  padding-right: h-rhythm(0.5);
}

input {
  @include adjust-font-size-to(type-scale(base), 2);
}

textarea {
  @include padding-leader(0.5);
  @include padding-trailer(0.5);
  height: auto;
}

label {
  @include adjust-font-size-to(type-scale(base), 1);
  @include margin-trailer(0.5);
}



input[type=checkbox],
input[type=radio] {
  @include margin-trailer(1);
  display: inline-block;
  width: auto;

  &+label
  {
    display: inline-block;
    width: auto;
  }
}

textarea {
  width: 100%;
  max-width: 100%;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: $header-font-family;
  font-weight: $header-font-weight;
  font-style: $header-font-style;
  margin: 0;
  padding: 0;
}

hr {
  clear: both;
  height: 0;
  border: none;
  border-top: $border;
}

img {
  display: inline-block;
  vertical-align: middle; // Remove whitespace
  margin: 0;
  max-width: 100%;
  height: auto;
}

figure > img
{
  display:block;
}

a {
  text-decoration: none;
  color: c(default, link, text-color);
  transition: background-color 0.4s ease-in-out;
  transition: color 0.4s ease-in-out;

  &:hover,
  &:focus
  {
    color: c(default, link, hover, text-color);
  }

  &.is-active
  {
    color: c(default, link, active, text-color);
  }

  &.is-disabled,
  &.is-disabled:hover
  {
    color: c(default, link, disabled, text-color) !important;
    opacity:0.2;
  }

  img
  {
    border:none;
  }
}

ul,
ol {
  font-size: type-scale(base);
  line-height: inherit;
  list-style: none;
  margin: 0;
  padding: 0;
}

body {
  line-height: 1.3;
  font-family: $default-font-family;
  font-weight: $default-font-weight;
}

p {
  @include margin-trailer(1);
  @include adjust-font-size-to(type-scale(base));
  @extend %WithMaxMeasure;
  font-family: $default-font-family;
  line-height: inherit;
  color: c(default, default, text-color);
}

%WithMaxMeasure {
  max-width: $max-measure;
}

blockquote {
  @extend %WithMaxMeasure;
  margin: 0;
  padding: 0 0 0 h-rhythm(single);
  border-left: $border;
}

cite {
  font-style: italic;
  display: block;
  &:before
  {
    content: "\2014 \00A0";
  }
}

table {
  border-collapse: collapse;
  table-layout: fixed;
  margin: 0;
  width: 100%;
}

th {
  border-bottom: $border;
  padding: 0;
  font-weight: bold;
  text-align: left;
}

td {
  border-bottom: $border;
  padding: 0;
}

tr,
td,
th {
  vertical-align: middle;
}

.AlertBox {
  p,
  .Icon {
    color: c(default, default, text-color-loud);
  }

  &--success {
    background-color: c(success-color);
  }

  &--alert {
    background-color: c(warning-color);
  }
}

.Button {
  @extend %button;
}

.Icon {
  opacity: 0.5;
  margin-right: h-rhythm(half);

  &:only-child {
    opacity:1;
    margin-right: 0;
  }
}

.IconButton-Label,
.IconButton-Icon {
  @include adjust-font-size-to(type-scale(base));
}

.IconButton-Icon {
  margin-right: 0;
}

.IconButton-Label {
  //@extend .hide-for-small-only;
  margin-left: h-rhythm(third);
  // @include breakpoint($medium-up) {
  //   display: inline-block;
  // }
}

.List--alphabetised {
  font-size: type-scale(base);
  line-height: inherit;
  list-style: upper-alpha;
  margin-left: h-rhythm();
}

.List--bulleted {
  font-size: type-scale(base);
  line-height: inherit;
  list-style: disc;
  margin-left: h-rhythm();
}

.List--horizontal {
  @include clearfix;

  li
  {
    @include clearfix;
    @include adjust-font-size-to(type-scale(base), 1);
    float: left;
    margin-left: h-rhythm(half);
    &:first-child
    {
      margin-left: 0;
    }
  }
}

.List--numbered {
  font-size: type-scale(base);
  line-height: inherit;
  list-style: decimal;
  margin-left: h-rhythm();
}

.PrimaryHeader {
  //@include full;
  width: 100%;
  position:relative;

  .PrimaryHeader-Title {
    @include margin-trailer(0.5);
  }

  .PrimaryHeader-Subtitle {
    @include adjust-font-size-to(type-scale(base), 1);
    text-align: center;
    color: c(default, default, text-color-quiet)
  }

  h1+.Subtitle {
    @include margin-leader(0);
  }

  @include margin-trailer(0.5);
}

// Sticky Footer
// Source: http://ryanfait.com/sticky-footer/layout.css
//
// !important: This Sticky footer relies on a known height for the footer
// For a responsive sticky footer use the table technique or JavaScript
//--------------------------------------------------------------------------------------------------

// You must be sure that your footer is also styled to adopt this height, or have this height reflect
// your footer's height
$default-footer-height: rem(50) !default;

.StickyFooter-contentWrapper {
  min-height: 100%;
  height: auto !important;
  height: 100%;
  margin: 0 auto (-$default-footer-height); // the bottom margin is the negative value of the footer's height
}

.StickyFooter-push
{
  height: $default-footer-height;
}

