/*! bass v1.2.0 â€“ 13.11.2014 */

////
/// @author Pedr Browne
/// @group functions
////

// These items are used in test only
$bass-last-error: null;
$bass-under-test: false;
$bass-error-thrown: false;

/// By default, this function will throw a Sass error, but allows errors to be stopped during testing,
/// with the error saved to `$bass-last-error` instead so tests can check it was thrown.
///
/// @param {String} $error
///  The name of the error
///
/// @param {String} $message
///  The error message
///
/// @returns {Map}
///  A map of offsets to be rendered as CSS properties
///
@function bass-throw-error($error, $message) {
  @if $bass-under-test {
    @if not $bass-error-thrown {
      $bass-error-thrown: true !global;
      $bass-last-error: $error !global;
    }
  } @else {
    @error "#{$error}: #{$message}";
  }
  @return null;
}

////
/// @author Pedr Browne
/// @group support
////

/// Perform a deep merge of two maps, optionally overwriting existing values.
/// Note: I have a PR open adding this to Sassy maps
///
/// @param {Map} $map-old
///   The map to merge to.
///
/// @param {Map} $map-new
///   The map to merge into `$map-old`
///
/// @param {Bool} $overwrite (true)
///   How should the merge deal with existing values? If true, any existing values will be
///   Overwritten. If false, existing values will be preserved. The logic handling overwriting
///   Will fully recurse the map, so merging is based on path rather than node.
///
/// @return {Map}
///   A new map resulting from the merge of `$map-old` and `$map-new`.
///
@function map-merge-deep($map-old, $map-new, $overwrite: true) {
  // Iterate through each value of the new map
  @each $key, $new-value in $map-new {
    // Check if that value already exists on the old map
    @if map-has-key($map-old, $key) {
      // There is an existing key
      $old-value: map-get($map-old, $key);
      @if type-of($new-value) == map and type-of($old-value) == map {
        // If both are maps, recurse regardless of $overwrite
        $merged-value: map-merge-deep($old-value, $new-value);
        $map-old: map-set($map-old, $key, $merged-value);
      }@else{
        // Otherwise check $overwrite
        @if $overwrite{
          $map-old: map-set($map-old, $key, $new-value);
        }
      }
    }@else{
      // There is no existing key so add
      $map-old: map-set($map-old, $key, $new-value);
    }
  }
  @return $map-old;
}

////
/// @author Pedr Browne
/// @group support
////

/// Get the oposite side.
///
/// @param {String} $side
///   The side.
///
/// @returns {String}
///   The oposite side.
///
@function opposite-side($side){
  $sides:(
    top: bottom,
    bottom: top,
    left: right,
    right: left
  );
  @return map-get($sides, $side);
}

////
/// @author Pedr Browne (Originally from Foundation 4 and 5)
/// @group support
////

// Functions that allow you to think in pixels, but render rems (or ems)
// Pixel fallbacks should be provided with a Postprocessor if required.

/// For use in media queries
/// Media queries don't pay attention to the html element's body size and always go
/// with the browser default (16px).
///
/// @param {List} $values
///   The values to convert to root-ems.
///
/// @returns {List}
///   The converted values
///
/// @access public
///
@function root-em($values) {
  @return em($values, $bass-rem-base);
}

/// This is the old em-calc function from Foundation 4
/// The new em-calc function in Foundation 5 inexpicably delegates to rem-calc
/// Source: Foundation 4
///
/// @access public
///
@function em($values, $base-value: $bass-rem-base) {
    $max: length($values); // Get the total number of parameters passed

    @if $max == 1 {
      @return px-em(nth($values, 1), $base-value);
    }

    $emValues: ();
    @for $i from 1 through $max {
        $emValues: append($emValues, px-em(nth($values, $i), $base-value));
    }
    @return $emValues;
}

/// Convert a pixel value to its rem equivalent
/// Source: Foundation 5
///
/// @access public
///
@function rem($values) {
  $max: length($values);

  @if $max == 1 {
    @return px-rem(nth($values, 1));
  }

  $remValues: ();
  @for $i from 1 through $max {
    $remValues: append($remValues, px-rem(nth($values, $i)));
  }
  @return $remValues;
}

/// Remove the unit from a number
///
/// @access private
///
@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

/// Convert value to rems
///
/// @access private
///
@function px-rem($value) {
  // Strip units of both in case $value is passed in without units
  $value: strip-unit($value) / strip-unit($bass-rem-base) * 1rem;
  @if $value == 0rem {
    $value: 0;
  }
  @return $value;
}

///
/// @access private
///
@function px-em($value, $base-value: $bass-rem-base) {
  // Strip units of both in case $value is passed in without units
  $value: strip-unit($value) / strip-unit($base-value) * 1em;
  @if $value == 0em {
    $value: 0;
  }
  @return $value;
}

/// Parse custom values into distance values.
///
/// @param {String} $value
///   The value to parse.
///
/// @param {String} $orientation
///   The orientation of the value (horizontal | vertical).
///
/// @returns {Number}
///   The parsed value
///
/// @throws $bass-invalid-value-error
///
@function bass-parse-custom-unit-filter($value, $orientation){
  // Handle unitless values
  @if type-of($value) == number {
    @if unitless($value) {
      @return bass-rhythm-value($orientation, $value);
    }
  // Handle values in the custom units map
  } @else if map-has-key($bass-custom-units-map, $value) {
    // Find the unit
    $unit: map-get($bass-custom-units-map, $value);
    // Use the unit with the rhythm value for the orientation
    @return bass-rhythm-value($orientation, $unit);
  }
  @return bass-throw-error($bass-invalid-value-error, "Invalid value #{$value}");
}

/// Determine if the value is a valid number with a unit
///
/// @param {String} $value
///  Value to be checked
///
/// @returns {Bool}
///  Was the value number with a unit?
///
///
@function bass-is-unitless-number($value) {
  @return (type-of($value) == number and unitless($value));
}

/// A map containing breakpoints used by breakpoint.
///
/// @type Map
///
$bass-breakpoints-map: () !default;

////
/// @author Pedr Browne
/// @group config
////

/// A map of horizontal and vertical rhythm values for rhythm, size, box and positional calculations
///
/// @type Map
///
$bass-rhythm-value-map: (
  default: (
    vertical: 22px,
    horizontal: 22px
  )
) !default;


////
/// @author Pedr Browne
/// @group config
////

/// Map storing type scales, with values keyed to semantic names
///
/// @type Map
///
$bass-type-scale-map:
(
  default:
  (
    tiny:                10px,
    small:               12px,
    base:                16px,
    medium:              17px,
    large:               22px,
    x-large:             28px
  )
) !default;

////
/// @author Pedr Browne
/// @group config
////

/// Set the base font size for rem and em calculations.
/// This should be the font-size of the `html` element
///
/// @type Number
///
$bass-rem-base: $rhythm-base-font-size !default;

/// Set the value for h-rhythm and v-rhythm to output in.
///
/// @type String
///
$bass-rhythm-unit: rem;

/// A map containing custom units to use in rhythm, size, box and positional calculations.
/// You can use any units you like. By default Bass uses fractional units and multiplies
/// them with the rhythm unit.
///
/// @type Map
///
$bass-custom-units-map: (
  single: 1,
  double: 2,
  triple: 3,
  quadruple: 4,
  half: 0.5,
  third: 0.333333333,
  quarter: 0.25,
  -single: -1,
  -double: -2,
  -triple: -3,
  -quadruple: -4,
  -half: -0.5,
  -third: -0.333333333,
  -quarter: -0.25
) !default;

////
/// @author Pedr Browne
/// @group utils
////

/// Get the breakpoint with the given name.
///
/// @param {String} $name
///   The breakpoint name.
///
/// @returns {String}
///   The breakpoint.
///
/// @throws bass-no-breakpoint-error
///
@function bass-breakpoint($name){
  @if map-has-key($bass-breakpoints-map, $name) {
    @return map-get($bass-breakpoints-map, $name);
  } @else {
    @return bass-throw-error($bass-no-breakpoint-error, "There is no breakpoint named '#{$name}'");
  }
}

////
/// @author Pedr Browne (From mixins by Maximilian Hoffmann)
/// @group utils
////

/// Get the rhythm for the given orientation.
///
/// @param {String} $orientation
///   The orientation (horizontal | vertical).
///
/// @param {Number} $units (1)
///   The number of units of rhythm.
///
/// @param {String} $breakpoint (default)
///   The breakpoint to use when looking up the unit.
///
/// @returns {Number}
///   The rhythm.
///
@function bass-rhythm-value($orientation, $units: 1, $breakpoint: default) {

  // Ensure $orientation is valid
  @if $orientation != horizontal and $orientation != vertical {
    $error: bass-throw-error($bass-invalid-value-error, "Orientation must be either `horizontal` or `vertical` but it was `#{$orientation}`");
  }

  // Ensure $units is valid
  @if not bass-is-unitless-number($units) {
    @if map-has-key($bass-custom-units-map, $units) {
      $units: map-get($bass-custom-units-map, $units)
    } @else {
      @return bass-throw-error($bass-invalid-value-error, "The value `#{$units}` is not a valid value for a rhythm unit");
    }
  }

  $value: map-get-deep($bass-rhythm-value-map, $breakpoint, $orientation);
  @if $value {
    @return $value * $units;
  }@else {
    @return bass-throw-error($bass-no-rhythm-error, "There is no rhythm for breakpoint `#{$breakpoint}`");
  }
};

/// Get the vertical rhythm.
///
/// @param {Number} $units (1)
///   The number of units of rhythm.
///
/// @param {String} $breakpoint (default)
///   The breakpoint to use when looking up the unit.
///
/// @returns {Number}
///   The rhythm.
///
@function v-rhythm( $units: 1, $breakpoint: default ) {
  $pixel-value: bass-rhythm-value(vertical, $units, $breakpoint);
  @if $bass-rhythm-unit == rem {
    @return rem($pixel-value);
  }
  @return $pixel-value;
};

/// Get the horizontal rhythm.
///
/// @param {Number} $units (1)
///   The number of units of rhythm.
///
/// @param {String} $breakpoint (default)
///   The breakpoint to use when looking up the unit.
///
/// @returns {Number}
///   The rhythm.
///
@function h-rhythm( $units: 1, $breakpoint: default ) {
  $pixel-value: bass-rhythm-value(horizontal, $units, $breakpoint);
  @if $bass-rhythm-unit == rem {
    @return rem($pixel-value);
  }
  @return $pixel-value;
};

////
/// @author Pedr Browne
/// @group utils
////

/// Register a type-scale for use at a given breakpoint.
///
/// @param {Map} $type-scale
///   A map containing key-values of name and font-size.
///
/// @param {String} $breakpoint (default)
///   The breakpoint to use this scale at.
///
/// @returns {null}
///
@function bass-register-type-scale($type-scale, $breakpoint:default){
  $bass-type-scale-map: map-set($bass-type-scale-map, $breakpoint, $type-scale) !global;
  @return null;
}

/// A mixin wrapping 'bass-register-type-scale`, allowing type-scale registration from the top-level
///
/// @see bass-register-type-scale
///
@mixin bass-register-type-scale($type-scale, $breakpoint:default){
  $null: bass-register-type-scale($type-scale, $breakpoint:default);
}

/// Get the font-size for the given name
///
/// @param {Sting} $name
///   The name of the font-size
///
/// @param {String} $breakpoint
///   The name of the breakpoint
///
/// @returns {Number}
///   The font-size.
///
/// @throws
///
@function bass-type-scale($name, $breakpoint:default) {
  $value: map-get-deep($bass-type-scale-map, $breakpoint, $name);
  @if $value {
    @return $value;
  }@else {
    @return bass-throw-error($bass-no-type-scale-value-error, "There is no type scale value anmed #{$name} for breakpoint `#{$breakpoint}`");
  }
}

/// Get the font-size for the given name
///
/// @see bass-type-scale
///
@function ts($name, $breakpoint:default) {
  @return bass-type-scale($name, $breakpoint);
}

////
/// @author Pedr Browne
/// @group utils
////

/// A map containing other maps which each represent a z-index scope.
/// By always looking up modules' z-index values here the depth-relationships between
/// modules ar clear.
///
/// @type Map
///
$bass-z-index-map: () !default;

/// Look up an element's z-index using a keyword
///
/// @param {List} $path...
///   A path to the item, including its context and name.
///
/// @returns {Number}
///   The item's `z-index`.
///
/// @throws $bass-no-z-index-item-error
///
@function bass-z-index($path...) {
  $value: map-get-deep($bass-z-index-map, $path...);
  @if $value {
    @return $value;
  }@else {
    $error: bass-throw-error($bass-no-z-index-item-error, "There is no item with a z-index using the path `#{$path}`");
  }

  @return map-get-deep($bass-z-index-map, $path...);
}

/// Render a module's z-index
///
/// @param {List} $path...
///   A path to the item, including its context and name.
///
/// @outputs
///   The item's z-index
///
@mixin z($path...) {
  z-index: bass-z-index($path...);
}